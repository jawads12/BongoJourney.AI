{"ast":null,"code":"var _jsxFileName = \"D:\\\\BongoJourney.AI\\\\Frontend\\\\src\\\\pages\\\\Dashboardnew.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback, useRef, useEffect } from \"react\";\nimport loadGoogleMapsScript from \"./googleMaps.js\";\nimport Frame from \"./user_profile.js\";\nimport PortalPopup from \"../components/PortalPopup.js\";\nimport { Outlet, useNavigate } from \"react-router-dom\";\nimport Mytrip from \"../components/Mytrip.js\";\nimport Navbar from \"../components/Navbar.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [isFrameOpen, setFrameOpen] = useState(false);\n  const [isMytripOpen, setMytripOpen] = useState(false);\n  const [placesText, setPlacesText] = useState(\"\");\n  const autocompleteInputRef = useRef(null);\n  const navigate = useNavigate();\n  const openFrame = useCallback(() => {\n    setFrameOpen(true);\n  }, []);\n  const closeFrame = useCallback(() => {\n    setFrameOpen(false);\n  }, []);\n  const openMytrip = useCallback(() => {\n    setMytripOpen(true);\n  }, []);\n  const closeMytrip = useCallback(() => {\n    setMytripOpen(false);\n  }, []);\n  const onDashStartATripClick = useCallback(() => {\n    // Please sync \"dashboard\" to the project\n  }, []);\n  const onMyPlanClick = useCallback(() => {\n    navigate(\"/my-plan\");\n  }, [navigate]);\n  useEffect(() => {\n    loadGoogleMapsScript(() => {\n      if (window.google) {\n        // Initialize the Places Autocomplete service with componentRestrictions\n        const autocomplete = new window.google.maps.places.Autocomplete(autocompleteInputRef.current, {\n          componentRestrictions: {\n            country: \"BD\"\n          } // \"BD\" represents Bangladesh\n        });\n\n        autocomplete.addListener(\"place_changed\", function () {\n          const place = autocomplete.getPlace();\n          console.log(place); // You can handle the selected place as needed\n        });\n      }\n    });\n  }, []);\n  const handlePlacesTextChange = event => {\n    setPlacesText(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"i2sjUrDtI4xEDoIls3sMB3w5XeM=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useCallback","useRef","useEffect","loadGoogleMapsScript","Frame","PortalPopup","Outlet","useNavigate","Mytrip","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","isFrameOpen","setFrameOpen","isMytripOpen","setMytripOpen","placesText","setPlacesText","autocompleteInputRef","navigate","openFrame","closeFrame","openMytrip","closeMytrip","onDashStartATripClick","onMyPlanClick","window","google","autocomplete","maps","places","Autocomplete","current","componentRestrictions","country","addListener","place","getPlace","console","log","handlePlacesTextChange","event","target","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/BongoJourney.AI/Frontend/src/pages/Dashboardnew.js"],"sourcesContent":["import React, { useState, useCallback, useRef, useEffect } from \"react\";\r\nimport loadGoogleMapsScript from \"./googleMaps.js\";\r\nimport Frame from \"./user_profile.js\";\r\nimport PortalPopup from \"../components/PortalPopup.js\";\r\nimport { Outlet, useNavigate } from \"react-router-dom\";\r\nimport Mytrip from \"../components/Mytrip.js\";\r\nimport Navbar from \"../components/Navbar.js\";\r\n\r\n\r\nconst Dashboard = () => {\r\n    const [isFrameOpen, setFrameOpen] = useState(false);\r\n    const [isMytripOpen, setMytripOpen] = useState(false);\r\n    const [placesText, setPlacesText] = useState(\"\");\r\n    const autocompleteInputRef = useRef(null);\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const openFrame = useCallback(() => {\r\n        setFrameOpen(true);\r\n    }, []);\r\n\r\n    const closeFrame = useCallback(() => {\r\n        setFrameOpen(false);\r\n    }, []);\r\n\r\n    const openMytrip = useCallback(() => {\r\n        setMytripOpen(true);\r\n    }, []);\r\n\r\n    const closeMytrip = useCallback(() => {\r\n        setMytripOpen(false);\r\n    }, []);\r\n\r\n    const onDashStartATripClick = useCallback(() => {\r\n        // Please sync \"dashboard\" to the project\r\n    }, []);\r\n\r\n    const onMyPlanClick = useCallback(() => {\r\n        navigate(\"/my-plan\");\r\n    }, [navigate]);\r\n\r\n    useEffect(() => {\r\n        loadGoogleMapsScript(() => {\r\n            if (window.google) {\r\n                // Initialize the Places Autocomplete service with componentRestrictions\r\n                const autocomplete = new window.google.maps.places.Autocomplete(autocompleteInputRef.current, {\r\n                    componentRestrictions: { country: \"BD\" }, // \"BD\" represents Bangladesh\r\n                });\r\n\r\n                autocomplete.addListener(\"place_changed\", function () {\r\n                    const place = autocomplete.getPlace();\r\n                    console.log(place); // You can handle the selected place as needed\r\n                });\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    const handlePlacesTextChange = (event) => {\r\n        setPlacesText(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <div>\r\n                <Outlet />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}