{"ast":null,"code":"var _jsxFileName = \"D:\\\\BongoJourney.AI\\\\Frontend\\\\src\\\\components\\\\BuildPlanMyself.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport loadGoogleMapsScript from \"../pages/googleMaps\";\nimport axios from \"axios\"; // Import Axios\n\nimport \"./BuildPlanMyself.css\";\nimport DayCard from \"./DayCard\"; // Import the DayCard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BuildPlanMyself = () => {\n  _s();\n  const [citySuggestions, setCitySuggestions] = useState([]);\n  const [startDate, setStartDate] = useState(\"\");\n  const [planId, setPlanId] = useState(0); // Initialize with 0 or any other default value\n\n  const [endDate, setEndDate] = useState(\"\");\n  const [placesTextFrom, setPlacesTextFrom] = useState(\"\");\n  const [placesTextTo, setPlacesTextTo] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [numberOfDays, setNumberOfDays] = useState(\"\");\n  const [travelingWith, setTravelingWith] = useState(\"couple\"); // Default value\n  const [selectedDay, setSelectedDay] = useState(1);\n  const [placeToAdd, setPlaceToAdd] = useState(\"\");\n  const [nodes, setNodes] = useState([]); // State to keep track of nodes\n  const [cities, setCities] = useState([]);\n  const [searchResultsFrom, setSearchResultsFrom] = useState([]);\n  const [searchResultsTo, setSearchResultsTo] = useState([]);\n  const [dayNodesMapping, setDayNodesMapping] = useState({});\n  const autocompleteInputFromRef = useRef(null);\n  const autocompleteInputToRef = useRef(null);\n  const autocompleteInputAddPlaceRef = useRef(null);\n  const generatePlanId = () => {\n    const newPlanId = Math.floor(Math.random() * 1000); // Generate a random planId\n    setPlanId(newPlanId); // Update the state with the generated planId\n  };\n\n  // When saving the plan, dynamically generate the planId based on the total count of plans\n  const handleSavePlan = async () => {\n    try {\n      // Retrieve user phone number from local storage\n      const storedPhone = localStorage.getItem('phone');\n\n      // Make a GET request to the backend to get the total count of plans\n      const response = await axios.get('http://localhost:3001/get-plan-count');\n      const totalPlanCount = response.data.count;\n\n      // Calculate the new planId by incrementing the total count by 1\n      const newPlanId = totalPlanCount + 1;\n\n      // Create the plan object with the generated planId\n      const planData = {\n        planId: newPlanId,\n        // Include the generated planId\n        from: placesTextFrom,\n        to: placesTextTo,\n        startDate: startDate,\n        endDate: endDate,\n        days: nodes,\n        userPhoneNumber: storedPhone // Include the user's phone number\n      };\n\n      // Make a POST request to save the plan with the generated planId\n      const saveResponse = await axios.post('http://localhost:3001/save-plan', planData);\n\n      // Handle the response, e.g., show a success message\n      console.log(\"Plan saved successfully:\", saveResponse.data);\n    } catch (error) {\n      console.error(\"Error saving plan:\", error);\n    }\n  };\n  const fetchCitySuggestions = async () => {\n    try {\n      // Replace 'http://localhost:3001/cities' with your backend endpoint\n      const response = await axios.get('http://localhost:3001/get-cities');\n      setCitySuggestions(response.data);\n    } catch (error) {\n      console.error('Error fetching city suggestions:', error);\n    }\n  };\n\n  // Function to filter city suggestions based on user input\n  const filterCitySuggestions = input => {\n    return citySuggestions.filter(city => city.toLowerCase().includes(input.toLowerCase()));\n  };\n  useEffect(() => {\n    axios.get(\"http://localhost:3001/get-cities\").then(res => {\n      setCities(res.data.map(city => city.name));\n    }).catch(error => {\n      console.error(\"Error fetching cities:\", error);\n    });\n  }, []);\n  useEffect(() => {\n    fetchCitySuggestions(); // Fetch city suggestions when the component mounts\n  }, []);\n  function searchCity(query) {\n    query = query.toLowerCase();\n    return cities.filter(city => city.toLowerCase().includes(query));\n  }\n  useEffect(() => {\n    if (startDate && endDate) {\n      const start = new Date(startDate);\n      const end = new Date(endDate);\n      const diffTime = Math.abs(end - start);\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      setNumberOfDays(diffDays);\n    }\n  }, [startDate, endDate]);\n  const handleStartDateChange = event => {\n    setStartDate(event.target.value);\n  };\n  const handleEndDateChange = event => {\n    setEndDate(event.target.value);\n  };\n  const handlePlaceToAddChange = event => {\n    setPlaceToAdd(event.target.value);\n  };\n  const handlePlacesTextChangeFrom = event => {\n    const searchText = event.target.value;\n    setPlacesTextFrom(searchText);\n    const resultsFrom = searchCity(searchText);\n    setSearchResultsFrom(resultsFrom);\n  };\n  const handlePlacesTextChangeTo = event => {\n    const searchText = event.target.value;\n    setPlacesTextTo(searchText);\n    const resultsTo = searchCity(searchText);\n    setSearchResultsTo(resultsTo);\n  };\n  const handleCitySelect = (selectedCity, field) => {\n    // Handle the selected city for the specified field (e.g., \"from\" or \"to\")\n    if (field === \"from\") {\n      setPlacesTextFrom(selectedCity);\n    } else if (field === \"to\") {\n      setPlacesTextTo(selectedCity);\n    }\n  };\n  const handleDateChange = event => {\n    setDate(event.target.value);\n  };\n  const handleNumberOfDaysChange = event => {\n    console.log(+event.target.value);\n    setNumberOfDays(+event.target.value);\n  };\n  const handleTravelingWithChange = event => {\n    setTravelingWith(event.target.value);\n  };\n  const handleAddPlaceNode = e => {\n    // e.preventDefault();\n    // if (e.target.value.trim() !== \"\") {\n    //   setNodes((prevNodes) => [...prevNodes, { name: e.target.value.trim() }]);\n    //   setPlaceToAdd(\"\");\n    // }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"build-plan-myself\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upper-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"from\",\n        value: placesTextFrom,\n        onChange: e => handleCitySelect(e.target.value, \"from\"),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), cities.map((city, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: city,\n          children: city\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"date\",\n        type: \"date\",\n        placeholder: \"Start Date\",\n        value: startDate,\n        onChange: handleStartDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"with\",\n        children: \"with\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"family\",\n        value: travelingWith,\n        onChange: handleTravelingWithChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"couple\",\n          children: \"Couple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"family\",\n          children: \"Family\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"friend\",\n          children: \"Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"solo\",\n          children: \"Solo trip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"number-of-days\",\n        type: \"date\",\n        placeholder: \"End Date\",\n        value: endDate,\n        onChange: handleEndDateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"to\",\n        value: placesTextTo,\n        onChange: e => handleCitySelect(e.target.value, \"to\"),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select City\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), cities.map((city, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: city,\n          children: city\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"day-card-container\",\n      children: Array.from({\n        length: numberOfDays\n      }, (_, i) => /*#__PURE__*/_jsxDEV(DayCard, {\n        day: i + 1,\n        nodes: nodes,\n        onAddPlaceNode: handleAddPlaceNode\n        // onclick={openModal}\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"save-button\",\n      onClick: handleSavePlan,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(BuildPlanMyself, \"vC1s9zy5cBXXQMfZhwKwXj1uCZE=\");\n_c = BuildPlanMyself;\nexport default BuildPlanMyself;\nvar _c;\n$RefreshReg$(_c, \"BuildPlanMyself\");","map":{"version":3,"names":["React","useState","useRef","useEffect","loadGoogleMapsScript","axios","DayCard","jsxDEV","_jsxDEV","BuildPlanMyself","_s","citySuggestions","setCitySuggestions","startDate","setStartDate","planId","setPlanId","endDate","setEndDate","placesTextFrom","setPlacesTextFrom","placesTextTo","setPlacesTextTo","date","setDate","numberOfDays","setNumberOfDays","travelingWith","setTravelingWith","selectedDay","setSelectedDay","placeToAdd","setPlaceToAdd","nodes","setNodes","cities","setCities","searchResultsFrom","setSearchResultsFrom","searchResultsTo","setSearchResultsTo","dayNodesMapping","setDayNodesMapping","autocompleteInputFromRef","autocompleteInputToRef","autocompleteInputAddPlaceRef","generatePlanId","newPlanId","Math","floor","random","handleSavePlan","storedPhone","localStorage","getItem","response","get","totalPlanCount","data","count","planData","from","to","days","userPhoneNumber","saveResponse","post","console","log","error","fetchCitySuggestions","filterCitySuggestions","input","filter","city","toLowerCase","includes","then","res","map","name","catch","searchCity","query","start","Date","end","diffTime","abs","diffDays","ceil","handleStartDateChange","event","target","value","handleEndDateChange","handlePlaceToAddChange","handlePlacesTextChangeFrom","searchText","resultsFrom","handlePlacesTextChangeTo","resultsTo","handleCitySelect","selectedCity","field","handleDateChange","handleNumberOfDaysChange","handleTravelingWithChange","handleAddPlaceNode","e","className","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","index","type","placeholder","Array","length","_","i","day","onAddPlaceNode","onClick","_c","$RefreshReg$"],"sources":["D:/BongoJourney.AI/Frontend/src/components/BuildPlanMyself.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport loadGoogleMapsScript from \"../pages/googleMaps\";\r\nimport axios from \"axios\"; // Import Axios\r\n\r\n\r\nimport \"./BuildPlanMyself.css\";\r\nimport DayCard from \"./DayCard\"; // Import the DayCard component\r\n\r\nconst BuildPlanMyself = () => {\r\n  const [citySuggestions, setCitySuggestions] = useState([]);\r\n\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [planId, setPlanId] = useState(0); // Initialize with 0 or any other default value\r\n\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [placesTextFrom, setPlacesTextFrom] = useState(\"\");\r\n  const [placesTextTo, setPlacesTextTo] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [numberOfDays, setNumberOfDays] = useState(\"\");\r\n  const [travelingWith, setTravelingWith] = useState(\"couple\"); // Default value\r\n  const [selectedDay, setSelectedDay] = useState(1);\r\n  const [placeToAdd, setPlaceToAdd] = useState(\"\");\r\n  const [nodes, setNodes] = useState([]); // State to keep track of nodes\r\n  const [cities, setCities] = useState([]);\r\n  const [searchResultsFrom, setSearchResultsFrom] = useState([]);\r\n  const [searchResultsTo, setSearchResultsTo] = useState([]);\r\n  const [dayNodesMapping, setDayNodesMapping] = useState({});\r\n\r\n\r\n\r\n  const autocompleteInputFromRef = useRef(null);\r\n  const autocompleteInputToRef = useRef(null);\r\n  const autocompleteInputAddPlaceRef = useRef(null);\r\n\r\n  const generatePlanId = () => {\r\n    const newPlanId = Math.floor(Math.random() * 1000); // Generate a random planId\r\n    setPlanId(newPlanId); // Update the state with the generated planId\r\n  };\r\n\r\n  // When saving the plan, dynamically generate the planId based on the total count of plans\r\nconst handleSavePlan = async () => {\r\n  try {\r\n    // Retrieve user phone number from local storage\r\n    const storedPhone = localStorage.getItem('phone');\r\n\r\n    // Make a GET request to the backend to get the total count of plans\r\n    const response = await axios.get('http://localhost:3001/get-plan-count');\r\n    const totalPlanCount = response.data.count;\r\n\r\n    // Calculate the new planId by incrementing the total count by 1\r\n    const newPlanId = totalPlanCount + 1;\r\n\r\n    // Create the plan object with the generated planId\r\n    const planData = {\r\n      planId: newPlanId, // Include the generated planId\r\n      from: placesTextFrom,\r\n      to: placesTextTo,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n      days: nodes,\r\n      userPhoneNumber: storedPhone, // Include the user's phone number\r\n    };\r\n\r\n    // Make a POST request to save the plan with the generated planId\r\n    const saveResponse = await axios.post('http://localhost:3001/save-plan', planData);\r\n\r\n    // Handle the response, e.g., show a success message\r\n    console.log(\"Plan saved successfully:\", saveResponse.data);\r\n  } catch (error) {\r\n    console.error(\"Error saving plan:\", error);\r\n  }\r\n};\r\n\r\n\r\n\r\n  const fetchCitySuggestions = async () => {\r\n    try {\r\n      // Replace 'http://localhost:3001/cities' with your backend endpoint\r\n      const response = await axios.get('http://localhost:3001/get-cities');\r\n      setCitySuggestions(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching city suggestions:', error);\r\n    }\r\n  };\r\n\r\n  // Function to filter city suggestions based on user input\r\n  const filterCitySuggestions = (input) => {\r\n    return citySuggestions.filter((city) =>\r\n      city.toLowerCase().includes(input.toLowerCase())\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"http://localhost:3001/get-cities\")\r\n      .then((res) => {\r\n        setCities(res.data.map((city) => city.name));\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching cities:\", error);\r\n      });\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    fetchCitySuggestions(); // Fetch city suggestions when the component mounts\r\n  }, []);\r\n\r\n\r\n  function searchCity(query) {\r\n    query = query.toLowerCase();\r\n    return cities.filter((city) => city.toLowerCase().includes(query));\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    \r\n\r\n\r\n    \r\n    if (startDate && endDate) {\r\n      const start = new Date(startDate);\r\n      const end = new Date(endDate);\r\n      const diffTime = Math.abs(end - start);\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n      setNumberOfDays(diffDays);\r\n    }\r\n  }, [startDate, endDate]);\r\n\r\n  const handleStartDateChange = (event) => {\r\n    setStartDate(event.target.value);\r\n  };\r\n\r\n  const handleEndDateChange = (event) => {\r\n    setEndDate(event.target.value);\r\n  };\r\n\r\n  const handlePlaceToAddChange = (event) => {\r\n    setPlaceToAdd(event.target.value);\r\n  };\r\n  const handlePlacesTextChangeFrom = (event) => {\r\n    const searchText = event.target.value;\r\n    setPlacesTextFrom(searchText);\r\n\r\n    const resultsFrom = searchCity(searchText);\r\n    setSearchResultsFrom(resultsFrom);\r\n  };\r\n\r\n  const handlePlacesTextChangeTo = (event) => {\r\n    const searchText = event.target.value;\r\n    setPlacesTextTo(searchText);\r\n\r\n    const resultsTo = searchCity(searchText);\r\n    setSearchResultsTo(resultsTo);\r\n  };\r\n  const handleCitySelect = (selectedCity, field) => {\r\n    // Handle the selected city for the specified field (e.g., \"from\" or \"to\")\r\n    if (field === \"from\") {\r\n      setPlacesTextFrom(selectedCity);\r\n    } else if (field === \"to\") {\r\n      setPlacesTextTo(selectedCity);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const handleDateChange = (event) => {\r\n    setDate(event.target.value);\r\n  };\r\n\r\n  const handleNumberOfDaysChange = (event) => {\r\n    console.log(+event.target.value);\r\n    setNumberOfDays(+event.target.value);\r\n  };\r\n\r\n  const handleTravelingWithChange = (event) => {\r\n    setTravelingWith(event.target.value);\r\n  };\r\n  const handleAddPlaceNode = (e) => {\r\n    // e.preventDefault();\r\n    // if (e.target.value.trim() !== \"\") {\r\n    //   setNodes((prevNodes) => [...prevNodes, { name: e.target.value.trim() }]);\r\n    //   setPlaceToAdd(\"\");\r\n    // }\r\n  };\r\n\r\n\r\n\r\n  \r\n\r\n  \r\n\r\n  return (\r\n    <div className=\"build-plan-myself\">\r\n      <div className=\"upper-div\">\r\n      <select\r\n          className=\"from\"\r\n          value={placesTextFrom}\r\n          onChange={(e) => handleCitySelect(e.target.value, \"from\")}\r\n        >\r\n          <option value=\"\">Select City</option>\r\n          {cities.map((city, index) => (\r\n            <option key={index} value={city}>\r\n              {city}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n        <input\r\n          className=\"date\"\r\n          type=\"date\"\r\n          placeholder=\"Start Date\"\r\n          value={startDate}\r\n          onChange={handleStartDateChange}\r\n        />\r\n\r\n        <div className=\"with\">with</div>\r\n        <select\r\n          className=\"family\"\r\n          value={travelingWith}\r\n          onChange={handleTravelingWithChange}\r\n        >\r\n          <option value=\"couple\">Couple</option>\r\n          <option value=\"family\">Family</option>\r\n          <option value=\"friend\">Friend</option>\r\n          <option value=\"solo\">Solo trip</option>\r\n        </select>\r\n        <input\r\n          className=\"number-of-days\"\r\n          type=\"date\"\r\n          placeholder=\"End Date\"\r\n          value={endDate}\r\n          onChange={handleEndDateChange}\r\n        />\r\n        <select\r\n          className=\"to\"\r\n          value={placesTextTo}\r\n          onChange={(e) => handleCitySelect(e.target.value, \"to\")}\r\n        >\r\n          <option value=\"\">Select City</option>\r\n          {cities.map((city, index) => (\r\n            <option key={index} value={city}>\r\n              {city}\r\n            </option>\r\n          ))}\r\n        </select>\r\n\r\n      </div>\r\n\r\n      <div className=\"day-card-container\">\r\n        {Array.from({ length: numberOfDays }, (_, i) => (\r\n          <DayCard\r\n            key={i}\r\n            day={i + 1}\r\n            nodes={nodes}\r\n            onAddPlaceNode={handleAddPlaceNode}\r\n            // onclick={openModal}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <button className=\"save-button\" onClick={handleSavePlan}>\r\n        Save\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BuildPlanMyself;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}